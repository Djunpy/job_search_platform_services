// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const blockSession = `-- name: BlockSession :one
UPDATE sessions
SET
    is_blocked = COALESCE($1, is_blocked)
WHERE id = $2
    RETURNING id, access_token, refresh_token, session_data, user_agent, client_ip, is_blocked, last_active, expires_at, session_length_seconds, created_at
`

type BlockSessionParams struct {
	IsBlocked pgtype.Bool `json:"is_blocked"`
	ID        pgtype.UUID `json:"id"`
}

func (q *Queries) BlockSession(ctx context.Context, arg BlockSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, blockSession, arg.IsBlocked, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.SessionData,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.LastActive,
		&i.ExpiresAt,
		&i.SessionLengthSeconds,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(
    session_data,
    user_agent,
    client_ip,
    is_blocked,
    expires_at,
    access_token,
    refresh_token,
    last_active

)VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
    RETURNING id, access_token, refresh_token, session_data, user_agent, client_ip, is_blocked, last_active, expires_at, session_length_seconds, created_at
`

type CreateSessionParams struct {
	SessionData  pgtype.Text `json:"session_data"`
	UserAgent    string      `json:"user_agent"`
	ClientIp     string      `json:"client_ip"`
	IsBlocked    pgtype.Bool `json:"is_blocked"`
	ExpiresAt    time.Time   `json:"expires_at"`
	AccessToken  pgtype.Text `json:"access_token"`
	RefreshToken pgtype.Text `json:"refresh_token"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.SessionData,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
		arg.AccessToken,
		arg.RefreshToken,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.SessionData,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.LastActive,
		&i.ExpiresAt,
		&i.SessionLengthSeconds,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, access_token, refresh_token, session_data, user_agent, client_ip, is_blocked, last_active, expires_at, session_length_seconds, created_at FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.SessionData,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.LastActive,
		&i.ExpiresAt,
		&i.SessionLengthSeconds,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionData = `-- name: UpdateSessionData :one
UPDATE sessions
SET
    access_token = COALESCE($1, access_token),
    refresh_token = COALESCE($2, refresh_token),
    session_data = COALESCE($3, session_data),
    last_active = COALESCE($4, last_active)
WHERE id = $5
    RETURNING id, access_token, refresh_token, session_data, user_agent, client_ip, is_blocked, last_active, expires_at, session_length_seconds, created_at
`

type UpdateSessionDataParams struct {
	AccessToken  pgtype.Text        `json:"access_token"`
	RefreshToken pgtype.Text        `json:"refresh_token"`
	SessionData  pgtype.Text        `json:"session_data"`
	LastActive   pgtype.Timestamptz `json:"last_active"`
	ID           pgtype.UUID        `json:"id"`
}

func (q *Queries) UpdateSessionData(ctx context.Context, arg UpdateSessionDataParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionData,
		arg.AccessToken,
		arg.RefreshToken,
		arg.SessionData,
		arg.LastActive,
		arg.ID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.SessionData,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.LastActive,
		&i.ExpiresAt,
		&i.SessionLengthSeconds,
		&i.CreatedAt,
	)
	return i, err
}
