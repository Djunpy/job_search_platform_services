// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Sexy string

const (
	SexyF Sexy = "f"
	SexyM Sexy = "m"
)

func (e *Sexy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Sexy(s)
	case string:
		*e = Sexy(s)
	default:
		return fmt.Errorf("unsupported scan type for Sexy: %T", src)
	}
	return nil
}

type NullSexy struct {
	Sexy  Sexy `json:"sexy"`
	Valid bool `json:"valid"` // Valid is true if Sexy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSexy) Scan(value interface{}) error {
	if value == nil {
		ns.Sexy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Sexy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSexy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Sexy), nil
}

type UserTypes string

const (
	UserTypesCompany   UserTypes = "company"
	UserTypesJobSeeker UserTypes = "job_seeker"
)

func (e *UserTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserTypes(s)
	case string:
		*e = UserTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for UserTypes: %T", src)
	}
	return nil
}

type NullUserTypes struct {
	UserTypes UserTypes `json:"user_types"`
	Valid     bool      `json:"valid"` // Valid is true if UserTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserTypes) Scan(value interface{}) error {
	if value == nil {
		ns.UserTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserTypes), nil
}

type Group struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type GroupPermission struct {
	ID           int32 `json:"id"`
	GroupID      int32 `json:"group_id"`
	PermissionID int32 `json:"permission_id"`
}

type Invite struct {
	ID              pgtype.UUID        `json:"id"`
	InviteCode      pgtype.Text        `json:"invite_code"`
	IsUsed          pgtype.Bool        `json:"is_used"`
	GroupID         pgtype.Int4        `json:"group_id"`
	UsedByUserID    pgtype.UUID        `json:"used_by_user_id"`
	CreatedByUserID pgtype.UUID        `json:"created_by_user_id"`
	ExpirationDate  pgtype.Timestamptz `json:"expiration_date"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type Permission struct {
	ID       int32       `json:"id"`
	Name     string      `json:"name"`
	Codename pgtype.Text `json:"codename"`
}

type Phone struct {
	ID          pgtype.UUID        `json:"id"`
	UserID      pgtype.UUID        `json:"user_id"`
	Number      int64              `json:"number"`
	CountryCode string             `json:"country_code"`
	Verified    pgtype.Bool        `json:"verified"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID              pgtype.UUID        `json:"id"`
	Email           string             `json:"email"`
	FirstName       pgtype.Text        `json:"first_name"`
	LastName        pgtype.Text        `json:"last_name"`
	Password        string             `json:"password"`
	IsDeleted       pgtype.Bool        `json:"is_deleted"`
	AuthSource      string             `json:"auth_source"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	LastTokenUpdate pgtype.Timestamptz `json:"last_token_update"`
	VerifiedEmail   pgtype.Bool        `json:"verified_email"`
	UserType        NullUserTypes      `json:"user_type"`
	IsBanned        pgtype.Bool        `json:"is_banned"`
	DateJoined      pgtype.Timestamptz `json:"date_joined"`
	Sexy            NullSexy           `json:"sexy"`
}

type UserGroup struct {
	ID        int32              `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	GroupID   int32              `json:"group_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type UserPermission struct {
	ID           int32              `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	PermissionID int32              `json:"permission_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}
