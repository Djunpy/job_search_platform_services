// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invites.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvite = `-- name: CreateInvite :one
INSERT INTO invites(
    invite_code, created_by_user_id, expiration_date, group_id
) VALUES ($1, $2, $3, $4)
    RETURNING id, invite_code, is_used, group_id, used_by_user_id, created_by_user_id, expiration_date, created_at, updated_at
`

type CreateInviteParams struct {
	InviteCode      pgtype.Text        `json:"invite_code"`
	CreatedByUserID pgtype.UUID        `json:"created_by_user_id"`
	ExpirationDate  pgtype.Timestamptz `json:"expiration_date"`
	GroupID         pgtype.Int4        `json:"group_id"`
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invite, error) {
	row := q.db.QueryRow(ctx, createInvite,
		arg.InviteCode,
		arg.CreatedByUserID,
		arg.ExpirationDate,
		arg.GroupID,
	)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.InviteCode,
		&i.IsUsed,
		&i.GroupID,
		&i.UsedByUserID,
		&i.CreatedByUserID,
		&i.ExpirationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvite = `-- name: DeleteInvite :exec
DELETE FROM invites
WHERE id = $1
`

func (q *Queries) DeleteInvite(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInvite, id)
	return err
}

const getAllInvites = `-- name: GetAllInvites :many
SELECT id, invite_code, is_used, group_id, used_by_user_id, created_by_user_id, expiration_date, created_at, updated_at FROM invites
`

func (q *Queries) GetAllInvites(ctx context.Context) ([]Invite, error) {
	rows, err := q.db.Query(ctx, getAllInvites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invite{}
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.InviteCode,
			&i.IsUsed,
			&i.GroupID,
			&i.UsedByUserID,
			&i.CreatedByUserID,
			&i.ExpirationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInviteByInviteCode = `-- name: GetInviteByInviteCode :one
SELECT id, invite_code, is_used, group_id, used_by_user_id, created_by_user_id, expiration_date, created_at, updated_at FROM invites
WHERE invite_code = $1
`

func (q *Queries) GetInviteByInviteCode(ctx context.Context, inviteCode pgtype.Text) (Invite, error) {
	row := q.db.QueryRow(ctx, getInviteByInviteCode, inviteCode)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.InviteCode,
		&i.IsUsed,
		&i.GroupID,
		&i.UsedByUserID,
		&i.CreatedByUserID,
		&i.ExpirationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvitesByUserId = `-- name: GetInvitesByUserId :many
SELECT id, invite_code, is_used, group_id, used_by_user_id, created_by_user_id, expiration_date, created_at, updated_at FROM invites
WHERE created_by_user_id = $1
`

func (q *Queries) GetInvitesByUserId(ctx context.Context, createdByUserID pgtype.UUID) ([]Invite, error) {
	rows, err := q.db.Query(ctx, getInvitesByUserId, createdByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invite{}
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.InviteCode,
			&i.IsUsed,
			&i.GroupID,
			&i.UsedByUserID,
			&i.CreatedByUserID,
			&i.ExpirationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvite = `-- name: UpdateInvite :one
UPDATE invites
SET
    used_by_user_id = COALESCE($1, used_by_user_id),
    is_used = COALESCE($2, is_used),
    updated_at = NOW()
WHERE invite_code = $3
    RETURNING id, invite_code, is_used, group_id, used_by_user_id, created_by_user_id, expiration_date, created_at, updated_at
`

type UpdateInviteParams struct {
	UsedByUserID pgtype.UUID `json:"used_by_user_id"`
	IsUsed       pgtype.Bool `json:"is_used"`
	InviteCode   pgtype.Text `json:"invite_code"`
}

func (q *Queries) UpdateInvite(ctx context.Context, arg UpdateInviteParams) (Invite, error) {
	row := q.db.QueryRow(ctx, updateInvite, arg.UsedByUserID, arg.IsUsed, arg.InviteCode)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.InviteCode,
		&i.IsUsed,
		&i.GroupID,
		&i.UsedByUserID,
		&i.CreatedByUserID,
		&i.ExpirationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
