// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToGroup = `-- name: AddUserToGroup :one
INSERT INTO user_groups(user_id, group_id)
VALUES ($1, $2)
    RETURNING id, user_id, group_id, created_at
`

type AddUserToGroupParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	GroupID int32       `json:"group_id"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) (UserGroup, error) {
	row := q.db.QueryRow(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups(id, name) VALUES ($1, $2)
    RETURNING id, name
`

type CreateGroupParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.ID, arg.Name)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createUserGroup = `-- name: CreateUserGroup :one
INSERT INTO user_groups (user_id, group_id) VALUES ($1, $2)
    RETURNING id, user_id, group_id, created_at
`

type CreateUserGroupParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	GroupID int32       `json:"group_id"`
}

func (q *Queries) CreateUserGroup(ctx context.Context, arg CreateUserGroupParams) (UserGroup, error) {
	row := q.db.QueryRow(ctx, createUserGroup, arg.UserID, arg.GroupID)
	var i UserGroup
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGroup, id)
	return err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, name FROM groups
WHERE name = $1
`

func (q *Queries) GetGroupByName(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByName, name)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getGroupsByUserId = `-- name: GetGroupsByUserId :many
SELECT
    g.name AS group_name,
    g.id AS group_id
FROM user_groups ug
         JOIN groups g ON g.id = ug.group_id
WHERE ug.user_id = $1
`

type GetGroupsByUserIdRow struct {
	GroupName string `json:"group_name"`
	GroupID   int32  `json:"group_id"`
}

func (q *Queries) GetGroupsByUserId(ctx context.Context, userID pgtype.UUID) ([]GetGroupsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getGroupsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGroupsByUserIdRow{}
	for rows.Next() {
		var i GetGroupsByUserIdRow
		if err := rows.Scan(&i.GroupName, &i.GroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromGroup = `-- name: RemoveUserFromGroup :exec
DELETE FROM user_groups
WHERE user_id = $1 AND group_id = $2
`

type RemoveUserFromGroupParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	GroupID int32       `json:"group_id"`
}

func (q *Queries) RemoveUserFromGroup(ctx context.Context, arg RemoveUserFromGroupParams) error {
	_, err := q.db.Exec(ctx, removeUserFromGroup, arg.UserID, arg.GroupID)
	return err
}

const updateGroup = `-- name: UpdateGroup :one
UPDATE groups
SET
    name = COALESCE($2, name)
WHERE id = $1
    RETURNING id, name
`

type UpdateGroupParams struct {
	ID   int32       `json:"id"`
	Name pgtype.Text `json:"name"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, updateGroup, arg.ID, arg.Name)
	var i Group
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
