// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: phones.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserPhone = `-- name: CreateUserPhone :one
INSERT INTO phones (
    user_id,
    number,
    country_code
) VALUES ($1, $2, $3)
    RETURNING id, user_id, number, country_code, verified, created_at, updated_at
`

type CreateUserPhoneParams struct {
	UserID      pgtype.UUID `json:"user_id"`
	Number      int64       `json:"number"`
	CountryCode string      `json:"country_code"`
}

func (q *Queries) CreateUserPhone(ctx context.Context, arg CreateUserPhoneParams) (Phone, error) {
	row := q.db.QueryRow(ctx, createUserPhone, arg.UserID, arg.Number, arg.CountryCode)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Number,
		&i.CountryCode,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePhoneByUserId = `-- name: DeletePhoneByUserId :exec
DELETE FROM phones WHERE user_id = $1
`

func (q *Queries) DeletePhoneByUserId(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePhoneByUserId, userID)
	return err
}

const getUserPhoneByUserId = `-- name: GetUserPhoneByUserId :one
SELECT id, user_id, number, country_code, verified, created_at, updated_at FROM phones
WHERE user_id = $1
`

func (q *Queries) GetUserPhoneByUserId(ctx context.Context, userID pgtype.UUID) (Phone, error) {
	row := q.db.QueryRow(ctx, getUserPhoneByUserId, userID)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Number,
		&i.CountryCode,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE phones
SET
    number = coalesce($2, number),
    country_code = coalesce($3, country_code)
WHERE user_id = $1
    RETURNING id, user_id, number, country_code, verified, created_at, updated_at
`

type UpdateUserPhoneParams struct {
	UserID      pgtype.UUID `json:"user_id"`
	Number      pgtype.Int8 `json:"number"`
	CountryCode pgtype.Text `json:"country_code"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (Phone, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.UserID, arg.Number, arg.CountryCode)
	var i Phone
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Number,
		&i.CountryCode,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
